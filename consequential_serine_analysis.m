%% Section 1: load data 
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Northwestern\Research\GPCR_tail_analysis\tailseq_all.dat
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/10/19 11:20:47

%% Initialize variables.
filename = 'D:\Northwestern\Research\GPCR_tail_analysis\tailseq_all.dat';
delimiter = {''};

%% Format for each line of text:
%   column1: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
tailseqall = table(dataArray{1:end-1}, 'VariableNames', {'SL'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
%% Section 2: sequence analysis 
 % part 1 analysis of serines 

N = height(tailseqall); 
smatrix=zeros(N);
AA = input('Please input amino acid you want to analysis ','s');


for i = 1:N 

tail = tailseqall{i,1};

L=strlength (tail);

serines=strfind(tail, AA);
all_S=length(serines);
% Find single S positions 
t = diff(serines) == 1;
y = [t,false];
x = xor(y,[false,t]);
test=x|y;
single_S=length(find(test==0));
% find consequential S positions 
% Find 2 consequential S 
zero = zeros(1,L);
zero(serines) = 1; 
% Using a specific operation in readme.txt
v1 = [0 zero].*[zero 0];
v2 = xor(v1(1:L),v1(2:L+1));
v3 = [0 v2].*[v2 0];
v4 = xor(v3(1:L),v3(2:L+1));
double_S = sum(v4);
double_S_pos = find(v4==1);
% plotting the S positions
smatrix(i,1:4)=[L,all_S,single_S,double_S];

colormap(hot)
output = zeros(1,L);
output(serines) = 1;
output(double_S_pos) = 2;
subplot(N,1,i);
imagesc(1,1:L,output);
set(gca,'YTick',[],'XTick',[])
set(gca, 'visible', 'off');



end 

per=smatrix(:,2)./smatrix(:,1);
figure;hist(per(per<0.4),30);
